{
	"": "Listen on ::1 and 127.0.0.1, port 8000.",
	"": "You can also use identifiers like :http to listen on all interfaces on a standard service port",
	"listen": "localhost:8000",
	"": "Set connect and network protocol timeouts, in seconds.",
	"": "0 disables the timeout, i.e. means: wait forever.",
	"": "Note that the OS may still impose I/O timeouts even if this is 0.",
	"timeout": 0,
	"": "Set the number of seconds between reconnection attempts.",
	"": "This also affects round-robin scheduling.",
	"": "0 disables reconnecting altogether.",
	"reconnect": 10,
	"": "Set the packet read timeout, in seconds.",
	"": "0 disables the timeout, i.e. means: wait forever for data.",
	"": "If set, connections are closed automatically when they stop sending.",
	"readtimeout": 0,
	"": "Set to true to disable stats tracking.",
	"nostats": false,
	"": "Set to true to enable profiling.",
	"profile": false,
	"": "Size of the input buffer per stream in TS packets (= 188 bytes).",
	"": "Also used to determine the size of the kernel buffer for datagram sockets.",
	"inputbuffer": 1000,
	"": "Size of the output buffer per client connection in TS packets.",
	"outputbuffer": 400,
	"": "The global client connection limit.",
	"maxconnections": 100,
	"": "Soft limit for the number of client connections.",
	"": "Restreamer will start reporting that it is full when this limit is reached.",
	"": "It will still accept new connections until maxconnections is reached, however.",
	"fullconnections": 90,
	"": "Number of seconds between each heartbeat.",
	"": "Will be ignore if no heartbeat notifications are defined.",
	"heartbeatinterval": 60,
	"": "The JSON access log file name. If this option is empty, access logs are disabled.",
	"log": "",
	"": "The user database used for authentication stanzas",
	"userlist": {
		"username": {
			"": "The user's password",
			"password": "secret_password"
		}
	},
	"": "List of resources; can be streams, static content or APIs.",
	"resources": [
		{
			"": "Type of this resource: stream, static, api",
			"": "stream = HTTP stream",
			"": "static = static content from a local file or remote source",
			"": "api = builtin API",
			"type": "stream",
			"": "API endpoint, only used if type is api.",
			"": "health = reports system health.",
			"": "statistics = reports detailed system statistics. [deprecated, use prometheus]",
			"": "prometheus = reports detailed system statistics as a standard Prometheus scrape endpoint.",
			"": "check = reports the status of a stream. remote contains the serve path of the stream.",
			"": "control = allows setting a stream offline or online. The state is controlled by the presence of the query parameters 'offline' or 'online', respectively.",
			"api": "",
			"": "Path under which a resource is made available.",
			"serve": "/stream.ts",
			"": "The upstream URL. Supported protocols are: http, https, file, tcp, udp, unix, unixgram or unixpacket.",
			"": "file must specify the URL in host-compatible format.",
			"": "For tcp and udp, a port is mandatory. Literal IPv6 addresses must be enclosed in []",
			"": "unix will autodetect the type of domain socket, but you can also be explicit with unixgram and unixpacket.",
			"": "This parameter is also required for API types 'check' and 'control', setting the stream they refer to.",
			"": "If the udp protocol is used, the address can be a unicast or multicast address.",
			"": "Multicast groups are joined automatically.",
			"remote": "http://localhost:10000/stream.ts",
			"": "Instead of a single remote URL, a list of URLs can be specified with the remotes option.",
			"": "The same rules as for remote apply.",
			"": "If both are specified, both are used. This does not apply to API and proxy endpoints, where only a single remote is supported.",
			"remotes": [ ],
			"": "Cache time in seconds, use 0 to disable caching.",
			"": "Only supported for static content.",
			"cache": 0,
			"": "Maximum receive unit, the packet size for datagram sockets (UDP).",
			"": "This value is important, because individual datagrams can only be received as a whole. Excess data is discarded.",
			"mru": 1500,
			"": "Access control for this resource. If not present, no authentication is necessary.",
			"": "Otherwise, an authentication token that matches one of the users is required.",
			"authentication": {
				"": "The authentication type: basic or bearer",
				"": "Basic authentication requires a valid Authorization: Basic base64(md5sum('user:password')) header.",
				"": "Bearer authentication requires a valid Authorization: Bearer base64('password') header.",
				"type": "",
				"": "Realm specifies the realm that is sent back to the client if no Authorization header was present.",
				"realm": "",
				"": "A single user that is allowed to access this resource. Concatenated with users.",
				"user": "",
				"": "A list of users that may access this resource. prepended with user.",
				"users": [ ]
				
			}
		},
		{
			"type": "api",
			"api": "check",
			"serve": "/check/stream.ts",
			"remote": "/stream.ts"
		},
		{
			"type": "api",
			"api": "control",
			"serve": "/control/stream.ts",
			"remote": "/stream.ts"
		},
		{
			"type": "stream",
			"serve": "/pipe.ts",
			"remote": "file:///tmp/pipe.ts",
			"remotes": [ "unix:///tmp/pipe2.ts" ]
		},
		{
			"type": "api",
			"api": "health",
			"serve": "/health"
		},
		{
			"type": "api",
			"api": "prometheus",
			"serve": "/metrics"
		},
		{
			"type": "static",
			"serve": "/test",
			"remote": "file:///tmp/test"
		},
		{
			"type": "static",
			"serve": "/stats",
			"remote": "http://localhost:10000/stats",
			"cache": 60
		}
	],
	"": "List of event handlers; currently only HTTP callbacks are supported.",
	"notifications": [
		{
			"": "Event to watch for: limit_hit, limit_miss or heartbeat",
			"": "limit_hit notifies when the soft limit (fullconnections) is reached",
			"": "limit_miss notifies when the number of connections goes below this threshold",
			"": "heartbeat notifies once per heartbeatinterval",
			"event": "limit_hit",
			"": "The kind of notification that is generated. Only url is supported.",
			"type": "url",
			"": "A GET request is sent to this URL if type is url.",
			"url": "http://localhost:8001/hit",
			"": "Optional authentication settings to allow sending an Authorization header with the get request",
			"authentication": {
				"": "Authentication type: basic or bearer",
				"type": "",
				"": "The user account that is used with this notification. Must be contained in the userlist.",
				"user": ""
			}
		},
		{
			"event": "limit_miss",
			"type": "url",
			"url": "http://localhost:8001/miss"
		},
		{
			"event": "heartbeat",
			"type": "url",
			"url": "http://localhost:8001/ping"
		}
	]
}
